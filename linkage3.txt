import pandas as pd

# Read input data frames
df_raid = Alteryx.read("#1")  # Output from the initial RAID linking script
df_relationships = Alteryx.read("#2")  # Relationship table

# Initialize output DataFrames
df_output_programs = pd.DataFrame(columns=['RAID Key', 'Program JIRA Key', 'Project JIRA Key', 'Business Outcome JIRA Key'])
df_output_projects = pd.DataFrame(columns=['RAID Key', 'Program JIRA Key', 'Project JIRA Key', 'Business Outcome JIRA Key'])
df_output_bos = pd.DataFrame(columns=['RAID Key', 'Program JIRA Key', 'Project JIRA Key', 'Business Outcome JIRA Key'])

# Process Programs
for _, row in df_relationships.iterrows():
    program_key = row['Program JIRA Key']
    if pd.notna(program_key):
        # Find RAID keys associated with the Program
        related_raids = df_raid[df_raid['Linked Program(s)'].str.contains(program_key, na=False)]['RAID Key'].unique()
        for raid_key in related_raids:
            linked_project_keys = df_relationships[(df_relationships['Program JIRA Key'] == program_key)]['Project JIRA Key'].dropna().unique()
            linked_bo_keys = df_relationships[(df_relationships['Program JIRA Key'] == program_key)]['Business Outcome JIRA Key'].dropna().unique()

            # Add a record for each linked Project JIRA Key
            for project_key in linked_project_keys:
                df_output_programs = df_output_programs.append({
                    'RAID Key': raid_key,
                    'Program JIRA Key': program_key,
                    'Project JIRA Key': project_key,
                    'Business Outcome JIRA Key': None
                }, ignore_index=True)

            # Add a record for each linked Business Outcome JIRA Key
            for bo_key in linked_bo_keys:
                df_output_programs = df_output_programs.append({
                    'RAID Key': raid_key,
                    'Program JIRA Key': program_key,
                    'Project JIRA Key': None,
                    'Business Outcome JIRA Key': bo_key
                }, ignore_index=True)

            # Add linked Project JIRA Keys to df_output_projects
            for project_key in linked_project_keys:
                df_output_projects = df_output_projects.append({
                    'RAID Key': raid_key,
                    'Program JIRA Key': program_key,
                    'Project JIRA Key': project_key,
                    'Business Outcome JIRA Key': None
                }, ignore_index=True)

            # Add linked Business Outcome JIRA Keys to df_output_bos
            for bo_key in linked_bo_keys:
                df_output_bos = df_output_bos.append({
                    'RAID Key': raid_key,
                    'Program JIRA Key': program_key,
                    'Project JIRA Key': None,
                    'Business Outcome JIRA Key': bo_key
                }, ignore_index=True)

# Process Projects
for _, row in df_relationships.iterrows():
    project_key = row['Project JIRA Key']
    if pd.notna(project_key):
        # Find RAID keys associated with the Project
        related_raids = df_raid[df_raid['Linked Project(s)'].str.contains(project_key, na=False)]['RAID Key'].unique()
        for raid_key in related_raids:
            df_output_projects = df_output_projects.append({
                'RAID Key': raid_key,
                'Program JIRA Key': None,
                'Project JIRA Key': project_key,
                'Business Outcome JIRA Key': None
            }, ignore_index=True)

# Process Business Outcomes
for _, row in df_relationships.iterrows():
    bo_key = row['Business Outcome JIRA Key']
    if pd.notna(bo_key):
        # Find RAID keys associated with the Business Outcome
        related_raids = df_raid[df_raid['Linked BO(s)'].str.contains(bo_key, na=False)]['RAID Key'].unique()
        for raid_key in related_raids:
            df_output_bos = df_output_bos.append({
                'RAID Key': raid_key,
                'Program JIRA Key': None,
                'Project JIRA Key': None,
                'Business Outcome JIRA Key': bo_key
            }, ignore_index=True)

# Remove duplicates
df_output_programs.drop_duplicates(inplace=True)
df_output_projects.drop_duplicates(inplace=True)
df_output_bos.drop_duplicates(inplace=True)

# Write the processed data back to Alteryx
Alteryx.write(df_output_programs, 1)  # Output 1: Programs with linked Projects and Business Outcomes
Alteryx.write(df_output_projects, 2)  # Output 2: Linked Projects
Alteryx.write(df_output_bos, 3)  # Output 3: Linked Business Outcomes
