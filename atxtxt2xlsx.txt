IF STARTSWITH([Field_1], "1CLIENT") THEN 1 ELSE 0 ENDIF

IF [Row-1:TitleFlag] = 1 THEN 1 ELSE 0 ENDIF

IF STARTSWITH([Field_1], "SECURITY") THEN 1 
ELSEIF STARTSWITH([Row-1:Field_1], "SECURITY") THEN 1
ELSEIF [Row-1:HeaderFlag] = 1 THEN 1 
ELSE 0 
ENDIF

[TitleFlag] = 0 AND [PairFlag] = 0 AND [HeaderFlag] = 0

IF MOD([RecordID], 2) = 1 THEN 
  [Field_1] + " " + [Row+1:Field_1] 
ELSE 
  NULL 
ENDIF

import pandas as pd
import re

# Get the Alteryx input
df = Alteryx.read("#1")

# Define a function to parse each CombinedRecord
def parse_combined_record(record):
    fields = {
        'SECURITY': '',
        'CUSIP': '',
        'SECURITY_DESC': '',
        'STOCK_REC_QTY': '',
        'CMS_SEG_QTY': '',
        'CAMS_SEG_QTY': '',
        'DTC_QTY': '',
        'NON_DTC_GCL': '',
        'OPT_SEG_QTY': '',
        'TOTAL': ''
    }
    
    # Patterns to match each field with respect to the specific rules given
    security_pattern = r'^\s*(\S+)'  # SECURITY: First non-space string
    cusip_pattern = r'\s+(\S+)'  # CUSIP: Next non-space string
    desc_pattern = r'\s+(.+?)\s{2,}'  # SECURITY DESC: Characters until two or more spaces
    qty_pattern = r'(\S+)\s{2,}'  # Generic pattern for quantity fields with two or more spaces
    single_space_qty_pattern = r'(\S+)\s'  # Quantity field with a single space after it
    last_qty_pattern = r'(\S+)\s*$'  # Last field (TOTAL) with trailing spaces
    
    # Construct the combined regex pattern
    combined_pattern = (
        security_pattern + cusip_pattern + desc_pattern +
        qty_pattern * 3 + single_space_qty_pattern +
        qty_pattern * 3 + last_qty_pattern
    )
    
    match = re.search(combined_pattern, record)
    
    if match:
        fields['SECURITY'] = match.group(1)
        fields['CUSIP'] = match.group(2)
        fields['SECURITY_DESC'] = match.group(3).strip()
        fields['STOCK_REC_QTY'] = match.group(4)
        fields['CMS_SEG_QTY'] = match.group(5)
        fields['CAMS_SEG_QTY'] = match.group(6)
        fields['DTC_QTY'] = match.group(7)
        fields['NON_DTC_GCL'] = match.group(8)
        fields['OPT_SEG_QTY'] = match.group(9)
        fields['TOTAL'] = match.group(10)
    
    return fields

# Apply the function to each record
parsed_data = df['CombinedRecord'].apply(parse_combined_record)
parsed_df = pd.DataFrame(parsed_data.tolist())

# Concatenate with the original dataframe
result_df = pd.concat([df, parsed_df], axis=1)

# Output the result
Alteryx.write(result_df, 1)
