IF STARTSWITH([Field_1], "1CLIENT") THEN 1 ELSE 0 ENDIF

IF [Row-1:TitleFlag] = 1 THEN 1 ELSE 0 ENDIF

IF STARTSWITH([Field_1], "SECURITY") THEN 1 
ELSEIF STARTSWITH([Row-1:Field_1], "SECURITY") THEN 1
ELSEIF [Row-1:HeaderFlag] = 1 THEN 1 
ELSE 0 
ENDIF

[TitleFlag] = 0 AND [PairFlag] = 0 AND [HeaderFlag] = 0

IF MOD([RecordID], 2) = 1 THEN 
  [Field_1] + " " + [Row+1:Field_1] 
ELSE 
  NULL 
ENDIF

import pandas as pd
import re

# Get the Alteryx input
df = Alteryx.read("#1")

# Define a function to check if a string represents a number
def is_number(s):
    try:
        float(s)
        return True
    except ValueError:
        return False

# Define a function to parse each CombinedRecord
def parse_combined_record(record):
    fields = {
        'SECURITY': '',
        'CUSIP': '',
        'SECURITY_DESC': '',
        'STOCK_REC_QTY': '',
        'CMS_SEG_QTY': '',
        'CAMS_SEG_QTY': '',
        'DTC_QTY': '',
        'NON_DTC_GCL': '',
        'OPT_SEG_QTY': '',
        'TOTAL': ''
    }
    
    # Split the record by spaces
    parts = record.split()
    idx = 0
    
    # SECURITY
    fields['SECURITY'] = parts[idx]
    idx += 1
    
    # CUSIP
    fields['CUSIP'] = parts[idx]
    idx += 1
    
    # SECURITY DESC
    desc = []
    while idx < len(parts):
        part = parts[idx]
        if (idx + 1 < len(parts) and parts[idx + 1].startswith(' ')) or is_number(part) or part.startswith('.'):
            break
        desc.append(part)
        idx += 1
    fields['SECURITY_DESC'] = ' '.join(desc).strip()
    
    # Move index past any large series of spaces
    while idx < len(parts) and parts[idx] == '':
        idx += 1
    
    # STOCK REC QTY
    if idx < len(parts):
        fields['STOCK_REC_QTY'] = parts[idx]
        idx += 1
    
    # CMS SEG QTY
    if idx < len(parts):
        fields['CMS_SEG_QTY'] = parts[idx]
        idx += 1
    
    # CAMS SEG QTY
    if idx < len(parts):
        fields['CAMS_SEG_QTY'] = parts[idx]
        idx += 1
    
    # DTC QTY
    if idx < len(parts):
        fields['DTC_QTY'] = parts[idx]
        idx += 1
    
    # NON DTC GCL
    if idx < len(parts):
        fields['NON_DTC_GCL'] = parts[idx]
        idx += 1
    
    # OPT SEG QTY
    if idx < len(parts):
        fields['OPT_SEG_QTY'] = parts[idx]
        idx += 1
    
    # TOTAL
    if idx < len(parts):
        fields['TOTAL'] = parts[idx]
    
    return fields

# Apply the function to each record
parsed_data = df['CombinedRecord'].apply(parse_combined_record)
parsed_df = pd.DataFrame(parsed_data.tolist())

# Concatenate with the original dataframe
result_df = pd.concat([df, parsed_df], axis=1)

# Output the result
Alteryx.write(result_df, 1)





import pandas as pd

# Get the Alteryx input
df = Alteryx.read("#1")

# Function to validate and clean data
def clean_data(row):
    # Convert numeric fields to decimals with 5 decimal places
    numeric_fields = ['STOCK_REC_QTY', 'CMS_SEG_QTY', 'CAMS_SEG_QTY', 'DTC_QTY', 'NON_DTC_GCL', 'OPT_SEG_QTY', 'TOTAL']
    
    for field in numeric_fields:
        # Handle DTC_QTY separately to remove trailing dash and convert to negative
        if field == 'DTC_QTY':
            value = row[field].strip()
            if value.endswith('-'):
                value = '-' + value[:-1]
            try:
                row[field] = round(float(value.replace(',', '')), 5)
            except ValueError:
                row[field] = None
        else:
            # Convert other numeric fields to float and round to 5 decimal places
            try:
                row[field] = round(float(row[field].replace(',', '')), 5)
            except ValueError:
                row[field] = None
    
    return row

# Apply the clean_data function to each row
cleaned_df = df.apply(clean_data, axis=1)

# Output the cleaned data to Alteryx
Alteryx.write(cleaned_df, 1)
