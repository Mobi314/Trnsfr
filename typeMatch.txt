import Alteryx
import pandas as pd

# Step 1: Read the input data from Alteryx input stream #1
df_input = Alteryx.read("#1")  # Reading input table from Alteryx (Input 1)

# Step 2: Define function to check and duplicate based on type matches
def duplicate_on_type_match(record_type, links):
    """Return a list of matching types for each record's links."""
    matching_links = [link for link in links if ':' in link and link.split(':')[0] == record_type]
    return matching_links  # Return all matching links, which could result in multiple entries

# Step 3: Process the data and generate duplicates based on type matches

output_rows = []

for idx, row in df_input.iterrows():
    # Check parent type matches and create duplicates if necessary
    if pd.notna(row['All Parent Links']) and row['All Parent Links'].strip():
        parent_matches = duplicate_on_type_match(row['Type'], row['All Parent Links'].split(','))
        for match in parent_matches:
            output_rows.append([row['key'], row['Type'], 'Parent Type Match', match])
    
    # Check child type matches and create duplicates if necessary
    if pd.notna(row['All Child Links']) and row['All Child Links'].strip():
        child_matches = duplicate_on_type_match(row['Type'], row['All Child Links'].split(','))
        for match in child_matches:
            output_rows.append([row['key'], row['Type'], 'Child Type Match', match])

# Step 4: Create a new dataframe for the output table
df_output = pd.DataFrame(output_rows, columns=["Jira Key", "Type", "Match Type", "Matching Link"])

# Step 5: Write the output dataframe to Alteryx output stream
Alteryx.write(df_output, 1)
