import pandas as pd

# Placeholder for data frames read from Alteryx
df_raid = Alteryx.read("#1")  # RAID data
df_programs = Alteryx.read("#2")  # Programs
df_projects = Alteryx.read("#3")  # Projects
df_business_outcomes = Alteryx.read("#5")  # Business Outcomes

# Initialize new columns in df_raid for linked keys
df_raid['Linked Program(s)'] = None
df_raid['Linked Project(s)'] = None
df_raid['Linked BO(s)'] = None

# Function to link keys from RAID to specific hierarchy based on impacted columns
def link_keys(df_raid, df_hierarchy, hierarchy_type, impacted_columns):
    for index, row in df_raid.iterrows():
        linked_keys = set()  # Use set to avoid duplicates
        for col in impacted_columns:
            if pd.notna(row[col]) and row[col] in df_hierarchy['Jira Key'].values:
                linked_keys.add(row[col])
        if linked_keys:
            current_keys = df_raid.at[index, f'Linked {hierarchy_type}(s)']
            current_keys = set(current_keys.split(',')) if current_keys else set()
            # Update with new keys, removing duplicates
            df_raid.at[index, f'Linked {hierarchy_type}(s)'] = ','.join(current_keys.union(linked_keys))

# Apply the functions for each category
link_keys(df_raid, df_business_outcomes, 'BO', ['Impacted Items_0_key', 'Impacted Items_1_key', 'Impacted Items_2_key', 'Impacted Items_3_key'])
link_keys(df_raid, df_programs, 'Program', ['Impacted Project(s)_0_key', 'Impacted Project(s)_1_key', 'Impacted Project(s)_2_key', 'Impacted Project(s)_3_key'])
link_keys(df_raid, df_projects, 'Project', ['Impacted Project(s)_0_key', 'Impacted Project(s)_1_key', 'Impacted Project(s)_2_key', 'Impacted Project(s)_3_key'])

# Output the processed data back to Alteryx
Alteryx.write(df_raid, 1)
